# Assemble the Auto-Pi-Bakery Docker images
# Usage:
# make         # compile each version of the Docker image
# make publish # Publish the latest version to Docker.io
# make clean   # Clean the local working folder

all: build

.PHONY: clean publish

# Search in the patches folder for recipe dependencies and recipe outputs
VPATH = patches

# Generated Docker images are tagged using the current Git version
git = $(shell git rev-parse --short HEAD)
raspbian-lite-version = 2017-07-05
docker-tag = raspbian_lite-$(raspbian-lite-version)-$(git)

# Build each of the supported images.
build: clean build-raspbian
	
build-raspbian: pibuilder.patch first_run.patch
	docker build --build-arg RASPBIAN_LITE_VERSION=$(raspbian-lite-version) -t gencore/auto-pi-bakery-raspbian:$(docker-tag) .
	docker tag gencore/auto-pi-bakery-raspbian:$(docker-tag) gencore/auto-pi-bakery-raspbian:latest

# Generate patches from the original and modified versions of the files
# The diffs are intermediate files so can be generated by the build process.
# NB: Diff will output 0 for no changes, 1 for changes found and >1 for errors
pibuilder.patch: pibuilder.sh pibuilder.modified
	-cd patches && diff pibuilder.sh pibuilder.modified > pibuilder.patch

first_run.patch: first_run.sh first_run.modified
	-cd patches && diff first_run.sh first_run.modified > first_run.patch

# Check that we are logged into Docker before we attempt to push artifacts to
# some other docker repository.
publish:
	@sh utils/docker-login
	@echo "Pushing latest image to Docker"
	docker push gencore/auto-pi-bakery-raspbian:$(docker-tag)
	docker push gencore/auto-pi-bakery-raspbian:latest

clean:
	rm -rf output
	rm -f patches/pibuilder.patch
	rm -f patches/first_run.patch